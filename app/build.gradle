plugins {
    id 'com.android.application'
}

// Workaround for JDK Image transform issue
System.setProperty("org.gradle.jvmargs", "-Xmx2048m -Dfile.encoding=UTF-8 -XX:+UseParallelGC")

android {
    namespace "com.example.grannyaid"
    compileSdk 34
    defaultConfig {
        applicationId "com.example.grannyaid"
        minSdk 24  // Android 7.0 (Nougat)
        targetSdk 34
        versionCode 1
        versionName "1.0"
        
        // Enable vector drawables for pre-Lollipop devices
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    // Add Java Toolchain for proper JDK compatibility
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
    
    // Optimize image processing
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
        noCompress "png", "jpg", "jpeg"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}

// Task to create empty mipmap directories and placeholder files for launcher icons
task generateLauncherIcons {
    doLast {
        // Define densities and their corresponding sizes
        def densities = [
            'mdpi': 48,
            'hdpi': 72,
            'xhdpi': 96,
            'xxhdpi': 144,
            'xxxhdpi': 192
        ]
        
        // Create directories if they don't exist and add placeholder files
        densities.each { density, size ->
            def dir = new File("${projectDir}/src/main/res/mipmap-${density}")
            if (!dir.exists()) {
                dir.mkdirs()
            }
            
            // Create simple placeholder launcher icons so the app compiles
            def launcherFile = new File(dir, "ic_launcher.png")
            def launcherRoundFile = new File(dir, "ic_launcher_round.png")
            
            if (!launcherFile.exists()) {
                launcherFile.createNewFile()
                launcherFile.text = "Placeholder icon - will be generated during build"
            }
            
            if (!launcherRoundFile.exists()) {
                launcherRoundFile.createNewFile()
                launcherRoundFile.text = "Placeholder round icon - will be generated during build"
            }
        }
        
        println "Created placeholder launcher icons for densities: ${densities.keySet()}"
        println "Note: Real icons will be generated during build process by Android Gradle Plugin"
    }
}

// Add a message about icon generation strategy
android.applicationVariants.all { variant ->
    // Print message during build
    variant.preBuild.doFirst {
        println "NOTE: Launcher icons will be generated from vector drawables at build time"
        println "This is handled by the Android Gradle Plugin with our aaptOptions configuration"
    }
}

// Hook into the build process
preBuild.dependsOn generateLauncherIcons